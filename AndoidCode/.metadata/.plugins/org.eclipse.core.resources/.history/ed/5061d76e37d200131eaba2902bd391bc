/*
 * Maria Luisa Carrion (mcarrion)
 * Project 3 - Arduino Night Light
 * 
 * References:
 *  - Bluetooth from Android Developer: http://developer.android.com/guide/topics/connectivity/bluetooth.html
 */

package marilu.nightlight;

import android.support.v7.app.ActionBarActivity;
import android.support.v4.app.Fragment;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Set;
import java.util.UUID;



public class MainActivity extends ActionBarActivity {

	private final static int REQUEST_ENABLE_BT = 1;
	BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
	BluetoothDevice mBluetoothDevice;
	UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");
	ConnectedThread connectedThread;
	ConnectThread connectThread;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (savedInstanceState == null) {
            getSupportFragmentManager().beginTransaction()
                    .add(R.id.container, new PlaceholderFragment())
                    .commit();
        }
        
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            return rootView;
        }
    }
        
	@Override
	protected void onStart() {
		super.onStart();
		
		checkBluetoothEnabled();
 	}
	
    public void setBluetooth() {
    	    	
//    	if (mBluetoothAdapter == null) {
//    	    // Device does not support Bluetooth
//    	}
    	
    	// Ask for Bluetooth activation if it is off
//    	if (!mBluetoothAdapter.isEnabled()) {
//            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
//            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
//        }
   	
//    	TextView tview = (TextView) findViewById(R.id.textView1);
    	
    	//tview.setText(tview.getText() + "_entramos o.o_2:3");
    	
//    	Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
    	// If there are paired devices
    	//tview.setText(tview.getText() + "_entramos o.o_" + pairedDevices.size());
//    	if (pairedDevices.size() > 0) {
    	    // Loop through paired devices
//    	    for (BluetoothDevice device : pairedDevices) {
//    	    	tview.setText(tview.getText() + "-" + device.getName() + "-" + device.getAddress());
//    	        
//    	    	//ParcelUuid[] ids = device.getUuids();
//    	    	
//    	    	//for (ParcelUuid uid : ids) {
//    	    	//	tview.setText(tview.getText() + "_" + uid.toString());
//    	    	//}
//    	    	
//    	    	if ( device.getName().equals("HC-06")) {
//    	    		mBluetoothDevice = device;
//    	        	//MY_UUID = UUID.fromString(device.getUuids()[0].toString());
//    	        	MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");
//    	        }
//    	    }
//    	}
    	
    }
    
    public void checkBluetoothEnabled() {
    	
    	// Ask for Bluetooth activation if it is off
    	if (!mBluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
        }
    	
    	// Assign the device and Make the Connection
    	if (mBluetoothAdapter.isEnabled()) {
    		try {
    			
    			getBluetoothDevice();
    	    	createConnection();
		    	
    		} catch (Exception e) {
    			showAlert("Connection failed.");     		
    		}
        }
    	
    }
    
    private void getBluetoothDevice() {
    	Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
    	// If there are paired devices
    	if (pairedDevices.size() > 0) {
    	    // Loop through paired devices
    	    for (BluetoothDevice device : pairedDevices) {
    	    	if ( device.getName().equals("HC-06")) {
    	    		mBluetoothDevice = device;
    	        }
    	    }
    	}
    }
    
    private void createConnection() {
    	connectThread = new ConnectThread(mBluetoothDevice);
    	connectThread.run();
    }
    
    private void showAlert(String message) {
    	Context context = getApplicationContext();
    	CharSequence text = message;
    	int duration = Toast.LENGTH_LONG;

    	Toast toast = Toast.makeText(context, text, duration);
    	toast.show();	
    }
        
    protected void onActivityResult(int requestCode, int resultCode,
            Intent data) {
    	// If the user turned on the Bluetooth, we make the connection
        if (requestCode == REQUEST_ENABLE_BT) {
            if (resultCode == RESULT_OK) {
            	getBluetoothDevice();
    	    	createConnection();

            }
        }
    }
    
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event)  {
          if (keyCode == KeyEvent.KEYCODE_BACK) {
        		  connectedThread.cancel();
          }

       return super.onKeyDown(keyCode, event);
    }
  
    public void sendMessage(View view) {

    	try {
    		// We send a messaged based on the id of the view (button) that triggered the action
	    	switch (view.getId()) {
	 	    	
		        case R.id.btn_water_drop:
		        	connectedThread.write("1".getBytes());
		        	break;
		        	
		        case R.id.btn_sword:
		        	connectedThread.write("2".getBytes());
		            break;
		            
		        case R.id.btn_smiley:
		        	connectedThread.write("3".getBytes());
		            break;
		            
		        case R.id.btn_invader:
		        	connectedThread.write("4".getBytes());
		            break;
		            
		        case R.id.imageButton9:
		        	connectedThread.write("5".getBytes());
		            break;   
		            
		        case R.id.imageButton10:
		        	connectedThread.write("6".getBytes());
		            break;
		            
		        case R.id.btn_intensity1:
		        	connectedThread.write("7".getBytes());
		            break;
		            
		        case R.id.btn_intensity2:
		        	connectedThread.write("8".getBytes());
		            break;
		            
		        case R.id.btn_intensity3:
		        	connectedThread.write("9".getBytes());
		            break;
		            
		        case R.id.btn_intensity4:
		        	connectedThread.write("0".getBytes());
		            break;

		        default:
		    	
	    	}
    	
    	} catch (Exception  e) { 
    		showAlert("Could not send message to the Arduino.");
    		checkBluetoothEnabled();
    	}

    }
       
    private class ConnectThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final BluetoothDevice mmDevice;
     
        public ConnectThread(BluetoothDevice device) {
            // Use a temporary object that is later assigned to mmSocket,
            // because mmSocket is final
            BluetoothSocket tmp = null;
            mmDevice = device;
     
            // Get a BluetoothSocket to connect with the given BluetoothDevice
            try {
                
				tmp = device.createRfcommSocketToServiceRecord(MY_UUID);
            } catch (IOException e) { Log.d("marilu","errorcreate Rf"); }
            mmSocket = tmp;
        }
     
        public void run() {
            // Cancel discovery because it will slow down the connection
            mBluetoothAdapter.cancelDiscovery();
     
            try {
                // Connect the device through the socket. This will block
                // until it succeeds or throws an exception
                mmSocket.connect();
            } catch (IOException connectException) {
                // Unable to connect; close the socket and get out
            	Log.d("marilu","error connecting to socket 1");
                try {
                    mmSocket.close();
                } catch (IOException closeException) { 
                	Log.d("marilu","error connecting to socket 2");
                }
                return;
            }
     
            // Do work to manage the connection (in a separate thread)
            manageConnectedSocket(mmSocket);
        }
     
        /** Will cancel an in-progress connection, and close the socket */
        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) { }
        }
    }
    
    
    public void manageConnectedSocket(BluetoothSocket mmSocket) {
    	
    	connectedThread = new ConnectedThread(mmSocket);
    	connectedThread.run();
    	
    }
    
    private class ConnectedThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final OutputStream mmOutStream;
     
        public ConnectedThread(BluetoothSocket socket) {
            mmSocket = socket;
            OutputStream tmpOut = null;
     
            // Get the input and output streams, using temp objects because
            // member streams are final
            try {
                tmpOut = socket.getOutputStream();
            } catch (IOException e) { }
     
            mmOutStream = tmpOut;
        }
     
        public void run() {
            byte[] buffer = new byte[1024];  // buffer store for the stream
            int bytes; // bytes returned from read()
        }
     
        /* Call this from the main activity to send data to the remote device */
        public void write(byte[] bytes) {
            try {
                mmOutStream.write(bytes);
            } catch (IOException e) { }
        }
     
        /* Call this from the main activity to shutdown the connection */
        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) { 
            	showAlert("There is no connection to close");
            }
        }
    }
    
    
    
    

}
